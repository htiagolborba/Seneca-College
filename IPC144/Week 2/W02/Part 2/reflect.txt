///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #2 (P2)
Full Name  : HIRAN TIAGO LINS BORBA
Student ID#:  147216220
Email      : htlins-borba@myseneca.ca
Section    : ZFF

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. Given the following C statements:

	float price1 = 17.96f, price3 = 17.98f;
	double price2 = 17.96, price4 = 17.98;
	printf("1. 17.96 = %f (as cents:%d)\n", price1, (int)(price1 * 100));
	printf("2. 17.96 = %lf (as cents:%d)\n", price2, (int)(price2 * 100));
	printf("3. 17.98 = %f (as cents:%d)\n", price3, (int)(price3 * 100));
	printf("4. 17.98 = %lf (as cents:%d)\n", price4, (int)(price4 * 100));

Execute the above sample code on your machine. Briefly explain why price1 and the corresponding converted
cent value does not properly represent the intended value. Why do you think all the other samples work as
expected?

--> When comparing the float type to the double type, it becomes apparent that the double type is capable of expressing larger exponential values. This expanded range allows for a wider representation of decimals, making it more versatile. Also, due to the increased size dedicated to representing the fractional part, the double type exhibits reduced relative error in calculations.

2. Execute the below code on your machine:

	int money = 7245;
	printf("1. $%.2lf\n", money / 100.0);
	printf("2. $%.2lf\n", money / (double)100);
	printf("3. $%.2lf\n", (double)money / 100);

Explain why these three examples work as intended. Apply terms like cast, promotion, coercion, implicit, and explicit in your answer.

--> Type of variable money is int. We can cast type int to float or double by multiplying or dividing int by float or double.
In the first command, the variable 'money' is an int and is divided by the floating-point value 100.0. The int value of money (7245) is divided by the decimal value 100.0. As a result, we get 72.45.
In the second, the data type of the variable 'money' is int. Additionally, the data type of the number 100 in the second command is int. The int value 100 is multiplied by (double). By doing so, the number 100 is explicitly casted to double. Then, the int value of money is divided by (double)100. This also yields a result of 72.45.
These are the reasons why the outputs of all three examples are the same.


3. Execute the following code on your machine:

	int result, money = 7245;
	result = money / 100;
	printf("1. $%.2lf\n", money / 100);
	printf("2. $%d\n", money / 100);
	printf("3. $%.2lf\n", result);
	printf("4. $%d\n", result);

a) What is the value of the variable result? Explain why.

--> The value of the variable result is 72. Variable result and money are int both of them. Even they are divided by 100, number 100 is also int type.
Result of int * int is int.

b) What values are displayed for samples 1, 2, 3, and 4?

--> 1. $72.00, 2. $72, 3. $72.00 and 4. $72

c) What can you conclude about the printf function that causes samples 1 and 3 not to work as expected?

 
--> In samples 1 and 3 the variables result and money are of type int. However, the format specifiers %lf used in these samples are intended for float or double types. 
So, sample 1 and 3 do not work as expected. To get results as expected, type of variables result and money must be casted to float or double as shown below:
	
	printf("1. $%.2lf\n", (double)money / 100);
								or
	printf("1. $%.2lf\n", money / (double)100);
	
	printf("3. $%.2lf\n", (double)result);

	


	  
